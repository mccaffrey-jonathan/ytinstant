// This code is Public Domain. Absolutely no warranties.
// Author: Vladimir Sedach <vsedach@gmail.com>

function makeFluentCanvas(canvas) {
  var obj = function(ctx) { this.context = ctx; };
  obj.prototype = FluentCanvasPrototype;
  return new obj(canvas.getContext('2d'));
}

var FluentCanvasPrototype = {
 context : null,
 save : function() { this.context.save(); return this; },
 restore : function() { this.context.restore(); return this; },
 scale : function(x, y) { this.context.scale(x, y); return this; },
 rotate : function(angle) { this.context.rotate(angle); return this; },
 translate : function(x, y) { this.context.translate(x, y); return this; },
 transform : function(a, b, c, d, e, f) { this.context.transform(a, b, c, d, e, f); return this; },
 setTransform : function(a, b, c, d, e, f) { this.context.setTransform(a, b, c, d, e, f); return this; },
 getGlobalAlpha : function() { return this.context.globalAlpha; },
 setGlobalAlpha : function(ga) { this.context.globalAlpha = ga; return this; },
 getGlobalCompositeOperation : function() { return this.context.globalCompositeOperation; },
 setGlobalCompositeOperation : function(gco) { this.context.globalCompositeOperation = gco; return this; },
 getStrokeStyle : function() { return this.context.strokeStyle; },
 setStrokeStyle : function(ss) { this.context.strokeStyle = ss; return this; },
 getFillStyle : function() { return this.context.fillStyle; },
 setFillStyle : function(ss) { this.context.fillStyle = ss; return this; },
 createLinearGradient : function(x0, y0, x1, y1) { return this.context.createLinearGradient(x0, y0, x1, y1); },
 createRadialGradient : function(x0, y0, r0, x1, y1, r1) { return this.context.createRadialGradient(x0, y0, r0, x1, y1, r1); },
 createPattern : function(image, repitition) { return this.context.createPattern(this, repitition); },
 getLineWidth : function() { return this.context.lineWidth; },
 setLineWidth : function(lw) { this.context.lineWidth = lw; return this; },
 getLineCap : function() { return this.context.lineCap; },
 setLineCap : function(lc) { this.context.lineCap = lc; return this; },
 getLineJoin : function() { return this.context.lineJoin; },
 setLineJoin : function(lj) { this.context.lineJoin = lj; return this; },
 getMiterLimit : function() { return this.context.miterLimit; },
 setMiterLimit : function(ml) { this.context.miterLimit = ml; return this; },
 getShadowOffsetX : function() { return this.context.shadowOffsetX; },
 setShadowOffsetX : function(sox) { this.context.shadowOffsetX = sox; return this; },
 getShadowOffsetY : function() { return this.context.shadowOffsetY; },
 setShadowOffsetY : function(soy) { this.context.shadowOffsetY = soy; return this; },
 getShadowBlur : function() { return this.context.shadowBlur; },
 setShadowBlur : function(sb) { this.context.shadowBlur = sb; return this; },
 getShadowColor : function() { return this.context.shadowColor; },
 setShadowColor : function(sc) { this.context.shadowColor = sc; return this; },
 clearRect : function(x, y, w, h) { this.context.clearRect(x, y, w, h); return this; },
 fillRect : function(x, y, w, h) { this.context.fillRect(x, y, w, h); return this; },
 strokeRect : function(x, y, w, h) { this.context.strokeRect(x, y, w, h); return this; },
 beginPath : function() { this.context.beginPath(); return this; },
 closePath : function() { this.context.closePath(); return this; },
 moveTo : function(x, y) { this.context.moveTo(x, y); return this; },
 lineTo : function(x, y) { this.context.lineTo(x, y); return this; },
 quadraticCurveTo : function(cpx, cpy, x, y) { this.context.quadraticCurveTo(cpx, cpy, x, y); return this; },
 bezierCurveTo : function(cp1x, cp1y, cp2x, cp2y, x, y) { this.context.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y); return this; },
 arcTo : function(x1, y1, x2, y2, radius) { this.context.arcTo(x1, y1, x2, y2, radius); return this; },
 rect : function(x, y, w, h) { this.context.rect(x, y, w, h); return this; },
 arc : function(x, y, radius, startAngle, endAngle, anticlockwise) { this.context.arc(x, y, radius, startAngle, endAngle, anticlockwise); return this; },
 fill : function() { this.context.fill(); return this; },
 stroke : function() { this.context.stroke(); return this; },
 clip : function() { this.context.clip(); return this; },
 isPointInPath : function(x, y) { return this.context.isPointInPath(x, y); },
 drawFocusRing : function(element, xCaret, yCaret, canDrawCustom) { return this.context.drawFocusRing(element, xCaret, yCaret, canDrawCustom); },
 getFont : function() { return this.context.font; },
 setFont : function(fnt) { this.context.font = fnt; return this; },
 getTextAlign : function() { return this.context.textAlign; },
 setTextAlign : function(ta) { this.context.textAlign = ta; return this; },
 getTextBaseline : function() { return this.context.textBaseline; },
 setTextBaseline : function(tb) { this.context.textBaseline = tb; return this; },
 fillText : function(text, x, y, maxWidth) { this.context.fillText(text, x, y, maxWidth); return this; },
 strokeText : function(text, x, y, maxWidth) { this.context.strokeText(text, x, y, maxWidth); return this; },
 measureText : function(text) { return this.context.measureText(text); },
 drawImage : function() { this.context.drawImage.apply(this.context, arguments); return this; },
 createImageData : function() { return this.context.createImageData.apply(this.context, arguments); },
 getImageData : function(sx, sy, sw, sh) { return this.context.getImageData(sx, sy, sw, sh); },
 putImageData : function(imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight) { this.context.putImageData(imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight); return this; }
};
